/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "lib.hpp"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define Vref		3.315	// reference voltage for ADC
#define ADC_period	500		// period of ADC conversion (ms)
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
volatile uint8_t data_7seg[4] = {0xFF, 0xFF, 0xFF, 0xFF};
	// data_7seg[0]	= naught digit (left)
	// data_7seg[1]	= first digit
	// data_7seg[2]	= second digit
	// data_7seg[3]	= third digit
volatile uint16_t ADC_data = 0;
	// ADC_data[15] = flag for finished conversion (new data)
	// ADC_data[0:11] = data from ADC

uint8_t dataTo7Seg[16] = {
	0b00000011,	// 0
	0b10011111,	// 1
	0b00100101,	// 2
	0b00001101,	// 3
	0b10011001,	// 4
	0b01001001,	// 5
	0b01000001,	// 6
	0b00011111,	// 7
	0b00000001,	// 8
	0b00001001,	// 9
	0b11111111,	// 10
	0b11111111,	// 11
	0b11111111,	// 12
	0b11111111,	// 13
	0b11111111,	// 14
	0b11111111	// 15
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
static void TIM3_Init(void);
extern "C" void TIM3_IRQHandler();
static void TIM2_Init(void);
static void ADC1_Init(void);
extern "C" void ADC_IRQHandler();
static void USART2_Init(void);
uint8_t USART2_read();
void USART2_write(uint8_t Char);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  	////////////////////////////
  	//	allow clock for GPIOA, GPIOB, USART2, TIM3, TIM2, ADC1
  	RCC->AHB1ENR |= (0b1 << 0) | (0b1 << 1);				// GPIOA, GPIOB
  	RCC->APB1ENR |= (0b1 << 0) | (0b1 << 1) | (0b1 << 17);	// TIM2, TIM3, USART2
  	RCC->APB2ENR |= (0b1 << 8);								// ADC1

  	// set CP10 and CP11 Full Access
  	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));

	////////////////////////////
	//	7seg display:
	//		PA9	- data
	//		PA8	- clock
	//		PB5	- strobe
	//
	//	UART:
	//		PA2	- Tx
	//		PA3	- Rx
	//
	//	ADC:
	//		PA0 - ADC
	//

  	/* GPIOx init */
	// GPIOA pins for display control
	setPinMode(GPIOA, 9, OUTPUT);	// PA9 - data
	setPinMode(GPIOA, 8, OUTPUT);	// PA8 - clock
	setPinMode(GPIOB, 5, OUTPUT);	// PB5 - strobe
	// GPIOA pins for UART communication
	setPinMode(GPIOA, 2, ALTERNATE);	// PA2 - Tx
	setPinMode(GPIOA, 3, ALTERNATE);	// PA3 - Rx
	setAlternateFunction(GPIOA, 2, 7);	// PA2 -> AF7 (USART2_TX)
	setAlternateFunction(GPIOA, 3, 7);	// PA3 -> AF7 (USART2_RX)
	// PA0 pin for ADC
	setPinMode(GPIOA, 0, ANALOG);		// PA0 - ADC
	// PA5 LED for debugging purposes
	setPinMode(GPIOA, 5, OUTPUT);

	TIM3_Init();
	TIM2_Init();

	/* ADC1 init */
	// 12bit, single conversion + trigger from TIM2 TRGO
	// APB2 Peripherals clock: 84MHz
	// max ADC clock: 36MHz -> 84MHz/4 = f_ADC = 21MHz
	// t_ADC ≈ 47.62 ns
	// t_sample = <0.1; 16> us	=>	(2.1; 336) cycles
	// SMPx -> 3/15/28/56/84/112/144/144 cycles
	// SMPx = 001 (15 cycles, 0.71 us)
	// SMPx = 010 (28 cycles, 1.33 us)
	ADC1_Init();

	/* USART2 init */
	// baud rate: 9600
	// data bits: 8
	// stop bits: 1
	// oversampling: 8
	// --> BRR = 42.000.000/(8*9.600) = 546.875
	USART2_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(getbit(ADC_data, 15)) {		// flag set = new data in ADC_data
		ADC_data &= 0xFFF;				// clear ADC_data flag, leaves 12 bits of data after conversion
		float mV_f = (float)ADC_data * (Vref / 4095.0) * 1000.0;	// 4095.0 = 2^12 - 1 where 12 is ADC1 resolution
																	// 1000.0 for conversion to mV
		uint16_t mV = (uint16_t)mV_f;	// whole number mV_f
		uint16_t BCD = 0;

		for(uint i=0; i<16; i++) {			// binary->BCD conversion from mV
			/* dekadická předkorekce */
			if( (BCD & 0x000F) > 0x0004 ) {	// proveď dekadickou předkorekci nulté číslice (jednotky)
				BCD += 0x0003;
			}
			if( (BCD & 0x00F0) > 0x0040) {	// proveď dekadickou předkorekci první číslice (desítky)
				BCD += 0x0030;
			}
			if( (BCD & 0x0F00) > 0x0400) {	// proveď dekadickou předkorekci druhé číslice (stovky)
				BCD += 0x0300;
			}
			BCD = (BCD << 1) | ((mV >> (15-i)) & 0b1);	// posuň BCD o jednu + nastav spodní bit na horní bit mV_f
		}


		uint8_t chars[4] = {0};
		// divide BCD into parts and sort them (index 0 = thousands of mV)
		for(uint i=0; i<4; i++) chars[3-i] = (BCD >> (4*i)) & 0b1111;
		// převeď BCD na data pro 7segment
		for(uint i=0; i<4; i++) data_7seg[i] = dataTo7Seg[chars[i]];
		data_7seg[0] &= ~(0b1);	// zapnutí H segmentu


		// převeď BCD na ASCII a pošli je přes USART
		for(uint i=0; i<4; i++) {
			chars[i] += 48;	// 48 posouvá čísla na jejich polohu v ASCII
		}

		// pošli změřené napětí přes USART
		USART2_write(chars[0]);
		USART2_write('.');
		USART2_write(chars[1]);
		USART2_write(chars[2]);
		USART2_write(chars[3]);
		USART2_write(' ');
		USART2_write('V');
		USART2_write('\n');


	}
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
// initialize TIM3 as a strobe clock
void TIM3_Init(void) {
	TIM3->DIER |= (0b1 << 0);	// interrupt enable
	TIM3->PSC = 0;				// prescaler value (f_TIM3 = 84 MHz)
	TIM3->CNT = 0;
	TIM3->ARR = 499;			// counter overflow with frequency (84*10^6)/([PSC+1]*[ARR+1]), currently 168kHz
	TIM3->CR1 |= (0b1 << 0);	// enable  TIM3
	TIM3->EGR |= (0b1 << 0); 	// update counter registers
	NVIC_EnableIRQ(TIM3_IRQn);
}

// strobe function
void TIM3_IRQHandler() {
	static uint digit = 0;		// segment choice (0 to 3)
	static uint count = 0;		// transmitted bit count (0 to 15)
	static uint16_t data = 0;	// bits sent to shift registers
	TIM3->SR &= ~(0b1 << 0); 	// clear Update Interrupt Flag

	if(count == 0) {			// trasmission's first bit: copy data_7seg[#] to data
		data = 0;	// clear for next operation
		// activate the 'digit' segment + copy already prepared data from data_7seg[digit]
		data = (0b1 << (15-digit)) | data_7seg[digit];
	}

	uint16_t bit = (data >> count) & 0b1;
	if(bit != 0) {
		GPIOA->BSRR |= (0b1 << 9);	// PA9 = '1'
	} else {
		GPIOA->BSRR |= (0b1 << 25);	// PA9 = '0'
	}
	GPIOA->BSRR |= (0b1 << 8);	// clock ↑
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	GPIOA->BSRR |= (0b1 << 24);	// clock ↓

	if(count == 15) {
		count = 0;
		// STROBE (PB5)
		GPIOB->BSRR |= (0b1 << 5);
		__NOP();
		__NOP();
		__NOP();
		__NOP();
		__NOP();
		GPIOB->BSRR |= (0b1 << 21);

		if(digit == 3) {
			digit = 0;
		} else {
			digit++;
		}
	} else {
		count++;
	}
}

// initialize TIM2 as ADC trigger
void TIM2_Init(void) {
	TIM2->PSC = (8400-1);
	TIM2->CNT = 0;
	TIM2->ARR = (ADC_period*10-1);
	TIM2->CR2 |= (0b010 << 4);
	TIM2->EGR |= (0b1 << 0);
	TIM2->CR1 |= (0b1 << 0);
}

static void ADC1_Init(void) {
	ADC->CCR |= (0b01 << 16);		// set ADC1 prescaler to /4
	ADC1->CR2 |= (0b0110 << 24);	// external event selector TIM2 TRGO
	ADC1->CR2 |= (0b01 << 28);		// event selector to rising edge
	ADC1->CR1 |= (0b1 << 5);		// EOCIE, (End of Conversion) IE
	ADC1->SQR1 &= ~(0b1111 << 20);	// clear L[3:0] - do just 1 conversion
	ADC1->SQR2 &= ~(0b11111 << 0);	// set 1st conversion in sequence to channel 0 (PA0)
	ADC1->SQR2 |= (4 << 0);			// set 1st conversion in sequence to channel 4 (PA4)
	ADC1->SMPR2 |= (0b010 << 0);	// set channel 0 sampling to 28 cycles (1.33 us at 21 MHz)
	ADC1->CR2 |= (0b1 << 0);		// enable ADC1
	NVIC_EnableIRQ(ADC_IRQn);
}

void ADC_IRQHandler() {
	// Interrupt from ADC1
	if(getbit(ADC1->SR, 1)) {
		// regular channel EOC
		if(getbit(ADC_data, 15)) writeBit(GPIOA, 5, 1);		// indicate overrun
		ADC_data = ADC1->DR | (0b1 << 15);					// write new data and set flag to '1'
		ADC1->SR &= ~(0b1 << 1);							// clear flag
	}
}

static void USART2_Init(void) {
	USART2->CR1 |= (0b1 << 13);		// enable USART
	USART2->CR1 |= (0b1 << 15);		// set oversampling rate (8)
	USART2->CR1 |= (0b1 << 3);		// enable transmitter
	// USART2->CR1 |= (0b1 << 2);	// enable receiver
	// USART2->CR1 |= (0b1 << 7);	// enable TXEIE (data sent)
	// USART2->CR1 |= (0b1 << 5);	// enable RXNEIE (data received)
	// USART2->CR1 |= (0b1 << 6);	// enable TCIE (end of data transmission, Tx/Rx)
	USART2->BRR = (546 << 4) + 12;	// 546 + 12/16 = 546.875
	// NVIC_EnableIRQ(USART2_IRQn);
}

uint8_t USART2_read() {
	while(!getbit(USART2->SR, 5));	// wait for char reception
	return USART2->DR;				// return received data
}

void USART2_write(uint8_t Char) {
	while(!getbit(USART2->SR, 7));	// wait for transmission buffer dump
	USART2->DR = Char;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
