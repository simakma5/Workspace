/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include "stm32f4xx.h"
#include "lib.hpp"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BONUS
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
volatile uint8_t data_7seg[4] = {0xFF, 0xFF, 0xFF, 0xFF};
// data_7seg[0]	= naught digit (left)
// data_7seg[1]	= first digit
// data_7seg[2]	= second digit
// data_7seg[3]	= third digit

uint8_t dataTo7Seg[13] = {
	0b00000011,	// 0
	0b10011111,	// 1
	0b00100101,	// 2
	0b00001101,	// 3
	0b10011001,	// 4
	0b01001001,	// 5
	0b01000001,	// 6
	0b00011111,	// 7
	0b00000001,	// 8
	0b00001001,	// 9
	0b01100001,	// E		(10)
	0b11110101,	// r		(11)
	0b11111111	// <null>	(12)
};

volatile uint8_t RxByte = 0;
volatile uint8_t TxByte = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
extern "C" void TIM3_IRQHandler();
extern "C" void USART2_IRQHandler();
uint8_t USART2_read();
void USART2_write(uint8_t znak);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  	/* Pin layout */
	//	7seg display:
	//		PA9	- data
	//		PA8	- clock
	//		PB5	- strobe
	//
	//	UART:
	//		PA2	- Tx
	//		PA3	- Rx

  	// allow clock for GPIOA and GPIOB
	RCC->AHB1ENR |= (0b1 << 0) | (0b1 << 1);
	// allow clock for TIM3 and USART 2
	RCC->APB1ENR |= (0b1 << 1) | (0b1 << 17);

	/* GPIOx init */
	// GPIOA pins for display control
	setPinMode(GPIOA, 9, OUTPUT);	// PA9 - data
	setPinMode(GPIOA, 8, OUTPUT);	// PA8 - clock
	setPinMode(GPIOB, 5, OUTPUT);	// PB5 - strobe
	// GPIOA pins for UART communication
	setPinMode(GPIOA, 2, ALTERNATE);	// PA2 - Tx
	setPinMode(GPIOA, 3, ALTERNATE);	// PA3 - Rx
	setAlternateFunction(GPIOA, 2, 7);	// PA2 -> AF7 (USART2_TX)
	setAlternateFunction(GPIOA, 3, 7);	// PA3 -> AF7 (USART2_RX)
	// PA5 LED for debugging
	setPinMode(GPIOA, 5, OUTPUT);

	/* TIM3 init (strobe clock) */
	TIM3->DIER |= (0b1 << 0);	// interrupt enable
	TIM3->PSC = 0;				// prescaler value (f_TIM3 = 84 MHz)
	TIM3->CNT = 0;
	TIM3->ARR = 499;			// counter overflow with frequency (84*10^6)/([PSC+1]*[ARR+1]), currently 168kHz
	TIM3->CR1 |= (0b1 << 0);	// enable  TIM3
	TIM3->EGR |= (0b1 << 0); 	// update counter registers
	NVIC_EnableIRQ(TIM3_IRQn);

	/* USART2 init */
	// baud rate: 9600
	// data bits: 8
	// stop bits: 1
	// oversampling: 8
	// --> BRR = 42.000.000/(8*9.600) = 546.875

	// enable USART
	USART2->CR1 |= (0b1 << 13);
	// set oversampling rate (8)
	USART2->CR1 |= (0b1 << 15);
	// enable transmitter
	USART2->CR1 |= (0b1 << 3);
	// enable receiver
	USART2->CR1 |= (0b1 << 2);
	// enable TXEIE (data sent)
	//USART2->CR1 |= (0b1 << 7);
	// enable RXNEIE (data received)
	//USART2->CR1 |= (0b1 << 5);
	// enable TCIE (end of data transmission, Tx/Rx)
	//USART2->CR1 |= (0b1 << 6);
	// 546 + 12/16 = 546.875
	USART2->BRR = (546 << 4) + 12;
	//NVIC_EnableIRQ(USART2_IRQn);

	////////////////////////////
	//	USART->SR:
	//		TC: Transmission Complete
	//		RXNE: Read data register not empty (received data)
	//
	//
	//

	#ifndef BONUS
	uint8_t temp_data = 0;
	#else
	uint8_t temp_data[6] = {0};
	#endif
	// až 4 čísla + 1 tečka + '\n'
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	#ifndef BONUS
	temp_data = USART2_read();	// přečti znak
	USART2_write(temp_data);	// vyšli ho nazpátek pro terminál, aby byl vidět

	temp_data -= 0b00110000;	// odečti, aby '0' -> 0

	// data_7seg[0] & data_7seg[1] & data_7seg[2] & data_7seg[3]
	if(temp_data <= 13) {
		for(uint i=0; i<3; i++) {
			data_7seg[i] = data_7seg[i+1];	// posuň data pro 7seg displej
		}
		data_7seg[3] = dataTo7Seg[temp_data];	// posuň nový znak do dat pro 7seg displej
	}
	#else



	temp_data[0] = USART2_read();	// přečti znak
	USART2_write(temp_data[0]);	// vyšli ho nazpátek pro terminál, aby byl vidět

	// přišel '\n' - pokus se o zápis do data_7seg[]
	if(temp_data[0] == '\n') {
		uint8_t status = 0;
		uint8_t pointer = 0;
		// bit[0] = error	- desetinná tečka na začátku dat
		// bit[1] = dot		- v datech se objevila a ošetřila desetinná tečka
		// bit[2] = tato číslice s desetinnou tečkou

		////////////////////////////
		//
		//

		////////////////////////////
		//	projdi všechny uložené znaky, jestli jsou platné
		//
		//	temp_data[0] = nejnovější znak, '\n'
		//	temp_data[1] = ___#  - nemůže být tečka
		//	temp_data[2] = __#_ / ___# / desetinná tečka
		//	temp_data[3] =  _#__ / __#_ / desetinná tečka
		//	temp_data[4] = _#__ / desetinná tečka
		//	temp_data[5] = #___ - nemůže být tečka
		//
		for(uint i=0; i<4; i++) {
			// vynuluj data_7seg[]
			data_7seg[i] = dataTo7Seg[12];
		}
		for(uint i=1; pointer<4; i++) { // znak temp_data[0] není třeba kontrolovat - '\n'
			if(temp_data[i] == '.' && (status & 0b10) != 0b10) {
				// desetinná tečka - v předchozí číslici zapni H segment
				status |= 0b10;
				if(temp_data[i+1] == 0 || i == 1) {
					status |= 0b1;
					break;
				}
				data_7seg[3-pointer] &= ~(0b1 << 0);

			} else if(temp_data[i] >= '0' && temp_data[i] <= '9') {
				// přijatý znak je číslo
				temp_data[i] -= 0b00110000;	// odečti 0b00110000, aby '0' -> 0 atd.

				data_7seg[3-pointer] &= (dataTo7Seg[temp_data[i]]);
				pointer++;

			} else if(temp_data[i] == 0) {
				// konec přijatých dat
				break;
			} else {
				// přijatý znak není číslem či tečkou
				status |= (0b1 << 0);	// error = 1
				break;					// vyjeď z for smyčky
			}
		}

		////////////////////////////
		//	write " Err" to 7seg if error occured
		//	' ' = 12
		//	'E' = 10
		//	'r' = 11
		//
		if((status&0b1) == 1) {
			data_7seg[0] = dataTo7Seg[12];
			data_7seg[1] = dataTo7Seg[10];
			data_7seg[2] = dataTo7Seg[11];
			data_7seg[3] = dataTo7Seg[11];
		}

		// vynuluj temp_data
		for(uint i=0; i<6; i++) {
			temp_data[i] = 0;
		}
	}

	// posuň temp_data
	for(uint i=5; i!=0; i--) {
		temp_data[i] = temp_data[i-1];
	}

	#endif
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
// strobe function
void TIM3_IRQHandler() {
	static uint digit = 0;		// segment choice (0 to 3)
	static uint count = 0;		// transmitted bit count (0 to 15)
	static uint16_t data = 0;	// bits sent to shift registers
	TIM3->SR &= ~(0b1 << 0); 	// clear Update Interrupt Flag

	if(count == 0) {			// trasmission's first bit: copy data_7seg[#] to data
		data = 0;	// clear for next operation
		// activate the 'digit' segment + copy already prepared data from data_7seg[digit]
		data = (0b1 << (15-digit)) | data_7seg[digit];
	}

	uint16_t bit = (data >> count) & 0b1;
	if(bit != 0) {
		GPIOA->BSRR |= (0b1 << 9);	// PA9 = '1'
	} else {
		GPIOA->BSRR |= (0b1 << 25);	// PA9 = '0'
	}
	GPIOA->BSRR |= (0b1 << 8);	// clock ↑
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	GPIOA->BSRR |= (0b1 << 24);	// clock ↓

	if(count == 15) {
		count = 0;
		// STROBE (PB5)
		GPIOB->BSRR |= (0b1 << 5);
		__NOP();
		__NOP();
		__NOP();
		__NOP();
		__NOP();
		GPIOB->BSRR |= (0b1 << 21);

		if(digit == 3) {
			digit = 0;
		} else {
			digit++;
		}
	} else {
		count++;
	}
}

// USART2 interrupt (either receive or transmit finish)
void USART2_IRQHandler() {
	if(getbit(USART2->CR1, 3) && getbit(USART2->SR, 7)) {		// Transmitter enable & TXE
		togglebit(GPIOA->ODR, 5);	// toggle debug LED (PA5)

		USART2->SR &= ~(0b1 << 7);	// clear TXE
		USART2->CR1 &= ~(0b1 << 3);	// disable Transmitter
	}

	if(getbit(USART2->CR1, 2) && getbit(USART2->SR, 5)) {		// Receiver enable & RXNE
		togglebit(GPIOA->ODR, 5);	// toggle debug LED (PA5)

		data_7seg[3] = data_7seg[2];
		data_7seg[2] = data_7seg[1];
		data_7seg[1] = data_7seg[0];
		data_7seg[0] = USART2->DR+1;

		USART2->SR &= ~(0b1 << 5);	// clear RXNE
		USART2->CR1 &= ~(0b1 << 2);	// disable Receiver
	}

	USART2->SR &= ~(0b1 << 6);	// clear TC
}

uint8_t USART2_read() {
	while(!getbit(USART2->SR, 5));	// wait for char reception
	return USART2->DR;				// return received data
}

void USART2_write(uint8_t Char) {
	while(!getbit(USART2->SR, 7));	// wait for transmission buffer dump
	USART2->DR = Char;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
